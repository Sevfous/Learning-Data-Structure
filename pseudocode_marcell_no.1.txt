struct node{
    char *keys;
    int degree;
    struct node **child;
    int numKey;
    bool leaf;
};

struct root_node{
    struct node *root;
    int degree;
};

function construct_b_tree(degree):
    b_tree = allocate memory for struct root_node
    b_tree->root = NULL
    b_tree->degree = degree
    return b_tree

function create_node(b_tree, degree, leaf):
    node = allocate memory for struct node
    node->degree = degree
    node->leaf = leaf
    node->keys = allocate memory for array of size (degree * 2) - 1
    node->child = allocate memory for array of size (degree * 2)
    node->numKey = 0
    return node

function split_child(root_node, idx, child, b_tree):
    newnode = create_node(b_tree, child->degree, child->leaf)
    newnode->numKey = root_node->degree - 1
    for j = 0 to root_node->degree - 1:
        newnode->keys[j] = child->keys[j + root_node->degree]
    
    if child->leaf == false:
        for j = 0 to root_node->degree:
            newnode->child[j] = child->child[j + root_node->degree]
    
    child->numKey = root_node->degree - 1
    for j = root_node->numKey downto idx + 1:
        root_node->child[j + 1] = root_node->child[j]
    
    root_node->child[idx + 1] = newnode
    for j = root_node->numKey - 1 downto idx:
        root_node->keys[j + 1] = root_node->keys[j]
    
    root_node->keys[idx] = child->keys[root_node->degree - 1]
    root_node->numKey++

function insert_node_not_full(b_tree, root_node, key):
    i = root_node->numKey - 1
    if root_node->leaf == true:
        while i >= 0 and root_node->keys[i] > key:
            root_node->keys[i + 1] = root_node->keys[i]
            i--
        root_node->keys[i + 1] = key
        root_node->numKey++
    else:
        while i >= 0 and root_node->keys[i] > key:
            i--
        
        if root_node->child[i + 1]->numKey == (2 * root_node->degree) - 1:
            split_child(root_node, i + 1, root_node->child[i + 1], b_tree)
            if root_node->keys[i + 1] < key:
                i++
        
        insert_node_not_full(b_tree, root_node->child[i + 1], key)

function insert_node(b_tree, key):
    if b_tree.root is NULL:
        b_tree.root = create_node(b_tree, b_tree.degree, true)
        b_tree.root.keys[0] = key
        b_tree.root.numKey = 1
    else:
        if b_tree.root.numKey equals (2 * b_tree.degree) - 1:
            newNode = create_node(b_tree, b_tree.degree, false)
            newNode.child[0] = b_tree.root
            split_child(newNode, 0, b_tree.root, b_tree)
            i = 0
            if newNode.keys[0] < key:
                i = i + 1

            insert_node_not_full(b_tree, newNode.child[i], key)
            b_tree.root = newNode
        else:
            insert_node_not_full(b_tree, b_tree.root, key)

function get_pred(root_node, idx):
    curr = root_node.child[idx]
    while curr.leaf is false:
        curr = curr.child[curr.numKey]
    return curr.keys[curr.numKey - 1]

function get_succ(root_node, idx):
    curr = root_node.child[idx + 1]
    while curr.leaf is false:
        curr = curr.child[0]
    return curr.keys[0]

function merge(root_node, idx):
    child = root_node.child[idx]
    sibling = root_node.child[idx + 1]
    
    child.keys[root_node.degree - 1] = root_node.keys[idx]
    
    for i = 0 to sibling.numKey - 1:
        child.keys[i + root_node.degree] = sibling.keys[i]

    if child.leaf is false:
        for i = 0 to sibling.numKey:
            child.child[i + root_node.degree] = sibling.child[i]

    for i = idx + 1 to root_node.numKey - 1:
        root_node.keys[i - 1] = root_node.keys[i]

    for i = idx + 2 to root_node.numKey:
        root_node.child[i - 1] = root_node.child[i]

    child.numKey += sibling.numKey + 1
    root_node.numKey--
    
    free(sibling)
    sibling = NULL
    
    return

function remove_nonleaf_node(root_node, idx):
    key = root_node.keys[idx]
    
    if root_node.child[idx].numKey >= root_node.degree:
        pred = get_pred(root_node, idx)
        root_node.keys[idx] = pred
        remove_node(root_node.child[idx], pred)
    
    else if root_node.child[idx + 1].numKey >= root_node.degree:
        succ = get_succ(root_node, idx)
        root_node.keys[idx] = succ
        remove_node(root_node.child[idx + 1], succ)
    
    else:
        merge(root_node, idx)
        remove_node(root_node.child[idx], key)
    
    return

function remove_leaf_node(root_node, idx):
    for i = idx + 1 to root_node.numKey - 1:
        root_node.keys[i - 1] = root_node.keys[i]
    
    root_node.numKey--
    return


function take_prev(root_node, idx):
    child = root_node.child[idx]
    sibling = root_node.child[idx - 1]
    
    for i = child.numKey - 1 down to 0:
        child.keys[i + 1] = child.keys[i]
    
    if child.leaf == false:
        for i = child.numKey down to 0:
            child.child[i + 1] = child.child[i]
    
    child.keys[0] = root_node.keys[idx - 1]
    
    if child.leaf == false:
        child.child[0] = sibling.child[sibling.numKey]
    
    root_node.keys[idx - 1] = sibling.keys[sibling.numKey - 1]
    child.numKey++
    sibling.numKey--
    return

function take_next(root_node, idx):
    child = root_node.child[idx]
    sibling = root_node.child[idx + 1]
    
    child.keys[child.numKey] = root_node.keys[idx]
    
    if child.leaf == false:
        child.child[child.numKey + 1] = sibling.child[0]
    
    root_node.keys[idx] = sibling.keys[0]
    
    for i = 1 to sibling.numKey - 1:
        sibling.keys[i - 1] = sibling.keys[i]
    
    if sibling.leaf == false:
        for i = 1 to sibling.numKey:
            sibling.child[i - 1] = sibling.child[i]
    
    child.numKey++
    sibling.numKey--
    return

function Nodefill(root_node, idx):
    if idx != 0 and root_node.child[idx - 1].numKey >= root_node.degree:
        take_prev(root_node, idx)
    else if idx != root_node.numKey and root_node.child[idx + 1].numKey >= root_node.degree:
        take_next(root_node, idx)
    else:
        if idx != root_node.numKey:
            merge(root_node, idx)
        else:
            merge(root_node, idx - 1)
    return

function key_search(root_node, key):
    idx = 0
    while idx < root_node.numKey and root_node.keys[idx] < key:
        idx = idx + 1
    return idx

function remove_node(root_node, key):
    idx = key_search(root_node, key)
    if idx < root_node.numKey and root_node.keys[idx] == key:
        if root_node.leaf == true:
            remove_leaf_node(root_node, idx)
        else:
            remove_nonleaf_node(root_node, idx)
    else:
        flag = false
        if root_node.leaf == true:
            print key does not exist in the tree
            return
        if idx == root_node.numKey:
            flag = true
        else:
            flag = false
        
        if root_node.child[idx].numKey < root_node.degree:
            Nodefill(root_node, idx)
        
        if flag == true and idx > root_node.numKey:
            remove_node(root_node.child[idx - 1], key)
        else:
            remove_node(root_node.child[idx], key)

function remove_b_tree(b_tree, key):
    if b_tree.root == NULL:
        print "There is no data"
        return
    remove_node(b_tree.root, key)
    if b_tree.root.numKey == 0:
        temp = b_tree.root
        if b_tree.root.leaf == true:
            b_tree.root = NULL
        else:
            b_tree.root = b_tree.root.child[0]
        free(temp)
        temp = NULL

function print_b_tree(root_node):
    for i = 0 to root_node.numKey - 1:
        if root_node.leaf == false:
            print_b_tree(root_node.child[i])
        print root_node.keys[i]
    if root_node.leaf == false:
        print_b_tree(root_node.child[root_node.numKey])

function BTreeCheck(root):
    if root.root != NULL:
        print_b_tree(root.root)

function main():
    menu = 0
    data = '\0'
    root = construct_b_tree(2)

    insert_node(root, 'A')
    insert_node(root, 'C')
    insert_node(root, 'D')
    insert_node(root, 'K')
    insert_node(root, 'M')
    insert_node(root, 'O')
    insert_node(root, 'P')
    insert_node(root, 'R')
    insert_node(root, 'S')
    insert_node(root, 'T')
    insert_node(root, 'U')

    while true:
        print "1. Insert"
        print "2. Delete"
        print "3. Print"
        print "4. Exit"
        print ">> "
        read menu

        switch menu:
            case 1:
                insert_node(root, 'E')
                insert_node(root, 'I')
                insert_node(root, 'L')
                insert_node(root, 'G')
                insert_node(root, 'X')
                print "[E,I,L,G,X] Inserted"
                pause
                clear screen
                break
            case 2:
                print "Insert data to delete: "
                read data
                remove_b_tree(root, data)
                pause
                clear screen
                break
            case 3:
                BTreeCheck(root)
                print new line
                pause
                clear screen
                break
            case 4:
                exit program
                return 0
